apiVersion: v1
kind: Template
labels:
  app: umap
  template: django-psql-persistent
message: 'The following software have been deployed on https://${APPLICATION_DOMAIN}.'

metadata:
  annotations:
    description: A example deployment of Umap
    iconClass: icon-python
    openshift.io/display-name: Umap
    openshift.io/documentation-url: https://umap-project.readthedocs.io/
    openshift.io/long-description: This template deploy umap from git
    openshift.io/provider-display-name: OSPO, Red Hat, Inc.
    tags: quickstart,python,django
    template.openshift.io/bindable: 'false'
  name: umap
objects:

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
    django-secret-key: ${DJANGO_SECRET_KEY}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "postgresql", "kind": "Service"}]'
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}

- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      description: Manage uwsgi configuration
    name: ${NAME}-uwsgi
  data: 
    uwsgi.ini: |+
      [uwsgi]
      http-socket = :8080
      module = umap.wsgi:application
      master = True
      vacuum = True
      max-requests = 5000
      processes = 4
      enable-threads = true
      static-map = /static=/srv/data/static
      static-map = /uploads=/srv/data/uploads
      plugins = python3

- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      description: Manage umap configuration
    name: ${NAME}-config
  data:
    config.py: |-
      # -*- coding:utf-8 -*-
      import os
      from umap.settings.base import *   # pylint: disable=W0614,W0401

      SECRET_KEY = os.environ['SECRET_KEY']
      INTERNAL_IPS = '127.0.0.1'
      ALLOWED_HOSTS = '*'

      DEBUG = False

      ADMIN_EMAILS = ''
      ADMINS = [(email, email) for email in ADMIN_EMAILS]
      MANAGERS = ADMINS

      DATABASES = {
          'default': {
              "ENGINE": "django.contrib.gis.db.backends.postgis",
              "NAME": os.environ['UMAP_DB_NAME'],
              "USER": os.environ['UMAP_DB_USER'],
              "PASSWORD": os.environ['UMAP_DB_PASS'],
              "HOST": os.environ['POSTGRESQL_SERVICE_HOST'],
              "PORT": os.environ['POSTGRESQL_SERVICE_PORT'],
              "CONN_MAX_AGE": 120,
          }
      }

      #TODO enable later
      COMPRESS_ENABLED = False
      COMPRESS_OFFLINE = True

      LANGUAGE_CODE = 'en'

      # Set to False if login into django account should not be possible. You can
      # administer accounts in the admin interface.
      ENABLE_ACCOUNT_LOGIN = True
      # TODO login with google + restrict 
      # https://stackoverflow.com/questions/47550789/django-allauth-social-logingoogle-oauth-2-limit-list-of-domains
      AUTHENTICATION_BACKENDS = ()

      AUTHENTICATION_BACKENDS += (
          'django.contrib.auth.backends.ModelBackend',
      )

      # MIDDLEWARE_CLASSES += (
      #     'social_django.middleware.SocialAuthExceptionMiddleware',
      # )

      SOCIAL_AUTH_RAISE_EXCEPTIONS = False
      SOCIAL_AUTH_BACKEND_ERROR_URL = "/"

      # If you want to add a playgroud map, add its primary key
      # UMAP_DEMO_PK = 204
      # If you want to add a showcase map on the home page, add its primary key
      # UMAP_SHOWCASE_PK = 1156
      # Add a baner to warn people this instance is not production ready.
      UMAP_DEMO_SITE = False

      # Whether to allow non authenticated people to create maps.
      LEAFLET_STORAGE_ALLOW_ANONYMOUS = True

      # This setting will exclude empty maps (in fact, it will exclude all maps where
      # the default center has not been updated)
      UMAP_EXCLUDE_DEFAULT_MAPS = False

      # How many maps should be showcased on the main page resp. on the user page
      UMAP_MAPS_PER_PAGE = 0
      # How many maps should be showcased on the user page, if owner
      UMAP_MAPS_PER_PAGE_OWNER = 10

      # TODO 
      SITE_URL = os.environ['SITE_URL']
      SHORT_SITE_URL = None

      CACHES = {
        'default': {
          'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        }
      }

      # POSTGIS_VERSION = (2, 1, 0)
      EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

      # You need to unable accent extension before using UMAP_USE_UNACCENT
      # python manage.py dbshell
      # CREATE EXTENSION unaccent;
      UMAP_USE_UNACCENT = False

      # For static deployment
      STATIC_ROOT = '/srv/data/static'

      # For users' statics (geojson mainly)
      MEDIA_ROOT = '/srv/data/uploads'

      # Default map location for new maps
      LEAFLET_LONGITUDE = 2
      LEAFLET_LATITUDE = 51
      LEAFLET_ZOOM = 6

      # Number of old version to keep per datalayer.
      LEAFLET_STORAGE_KEEP_VERSIONS = 5

      import sys

      LOGGING = {
          'version': 1,
          'disable_existing_loggers': False,
          'formatters': {
              'verbose': {
                  'format': '[django] %(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
              }
          },
          'handlers': {
              'console': {
                  'level': 'DEBUG',
                  'class': 'logging.StreamHandler',
                  'stream': sys.stdout,
                  'formatter': 'verbose'
              },
          },
          'loggers': {
              'django': {
                  'handlers': ['console'],
                  'level': 'DEBUG',
                  'propagate': True,
              },
          },
      }

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    source:
      git:
        ref: master
        uri: https://github.com/umap-project/umap.git
      type: Git
      dockerfile: |-
        # taken from https://github.com/umap-project/umap/pull/801/files
        FROM node:12 AS vendors
        WORKDIR /srv/code
        COPY . .
        RUN make installjs
        RUN make vendors

        FROM fedora:33
        WORKDIR /srv
        COPY . . 
        ENV UMAP_SETTINGS=/srv/umap-config/config.py
        RUN dnf install -y pip postgresql-devel python-devel gcc uwsgi uwsgi-plugin-python3 python3-gdal && dnf clean all

        RUN pip install .
        COPY --from=vendors /srv/code/umap/static/umap/vendors /srv/code/umap/static/umap/vendors
        EXPOSE 8080
        # TODO use init
        CMD ["uwsgi", "--ini", "/srv/uwsgi/uwsgi.ini"]
    strategy:
      type: Docker
  triggers:
  - type: ImageChange
  - type: ConfigChange

# TODO
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
      name: ${NAME}
      spec:
        initContainers:
        - name: ${NAME}-init-db
          command: ['umap', 'migrate']
          image: ' '
          env:
          - name: SITE_URL
            value: https://${APPLICATION_DOMAIN}
          - name: UMAP_DB_NAME
            value: ${DATABASE_NAME}
          - name: UMAP_DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: UMAP_DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: django-secret-key
                name: ${NAME}
          volumeMounts:
          - mountPath: /srv/umap-config/
            name: config-volume-umap
          - mountPath: /srv/data/
            name: ${NAME}-data
        - name: ${NAME}-init-static
          command: ['umap', 'collectstatic', '--no-input']
          image: ' '
          env:
          - name: SITE_URL
            value: https://${APPLICATION_DOMAIN}
          - name: UMAP_DB_NAME
            value: ${DATABASE_NAME}
          - name: UMAP_DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: UMAP_DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: django-secret-key
                name: ${NAME}
          volumeMounts:
          - mountPath: /srv/umap-config/
            name: config-volume-umap
          - mountPath: /srv/data/
            name: ${NAME}-data

        containers:
        - name: ${NAME}
          command: ['umap', 'runserver', '0.0.0.0:8080']
          env:
          - name: SITE_URL
            value: https://${APPLICATION_DOMAIN}
          - name: UMAP_DB_NAME
            value: ${DATABASE_NAME}
          - name: UMAP_DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: UMAP_DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: django-secret-key
                name: ${NAME}
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /srv/data/
            name: ${NAME}-data
          - mountPath: /srv/uwsgi/
            name: config-volume-uwsgi
          - mountPath: /srv/umap-config/
            name: config-volume-umap
        volumes:
        - name: ${NAME}-data
          persistentVolumeClaim:
            claimName: ${NAME}-data
        - name: config-volume-umap
          configMap:
            name: ${NAME}-config
        - name: config-volume-uwsgi
          configMap:
            name: ${NAME}-uwsgi


    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        - ${NAME}-init-db
        - ${NAME}-init-static
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${UMAP_DATA_VOLUME_CAPACITY}

#
# postgis
#

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: postgresql

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: postgresql
  spec:
    replicas: 1
    selector:
      name: postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: postgresql
        name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: POSTGRESQL_DATABASE
            value: ${DATABASE_NAME}
          image: ' '
          name: postgresql
          ports:
          - containerPort: 5432
          resources:
            limits:
              memory: ${MEMORY_POSTGRESQL_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgres-postgis:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Rebuild postgres with postgis
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: postgres-postgis
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: postgres-postgis:latest
    source:
      dockerfile: |-
        FROM postgres-fedora
        USER 0
        RUN mkdir -p postgresql-cfg && echo "shared_preload_libraries='postgis-3'" > postgresql-cfg/postgis.conf
        RUN mkdir -p postgresql-start && echo -en 'psql -c "CREATE EXTENSION IF NOT EXISTS postgis;" $POSTGRESQL_DATABASE' > postgresql-start/enable_postgis.sh
        RUN dnf install --setopt=install_weak_deps=False --best -y postgis && dnf clean all
        USER 26
    strategy:
      type: Docker
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: postgres-fedora:latest
  triggers:
  - type: ImageChange
  - type: ConfigChange

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of the postgres with postgis container
    name: postgres-postgis

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Original postgres imagestream from Fedora
    name: postgres-fedora
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: registry.fedoraproject.org/f33/postgresql
      generation: 2
      importPolicy:
        scheduled: true
      name: latest
      referencePolicy:
        type: Source


parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: umap

- description: Version of PostgreSQL image to be used (10 or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: '10'

- description: Maximum amount of memory the Django container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1024Mi

- description: Maximum amount of memory the PostgreSQL container can use.
  displayName: Memory Limit (PostgreSQL)
  name: MEMORY_POSTGRESQL_LIMIT
  required: true
  value: 512Mi

- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: POSTGRESQL_VOLUME_CAPACITY
  required: true
  value: 1Gi

- description: The exposed hostname that will route to the Django service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''

- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: umap

- displayName: Database username
  name: DATABASE_USER
  required: true
  value: umap

- displayName: Database user password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD

- description: Set this to a long random string.
  displayName: Django secret key
  from: '[\w]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY

- description: Volume space available for umap data, e.g. 512Mi, 2Gi.
  displayName: Umap data volume capacity
  name: UMAP_DATA_VOLUME_CAPACITY
  required: true
  value: 1Gi
